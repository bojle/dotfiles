" Get the defaults that most users want.
" source $VIMRUNTIME/defaults.vim

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  if has('persistent_undo')
    set undofile	" keep an undo file (undo changes after closing)
  endif
endif

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
Plug 'elixir-editors/vim-elixir'
" Plug 'vlime/vlime', {'rtp': 'vim/'}
call plug#end()

colorscheme gruvbox
set background=dark

filetype plugin indent on
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType python setlocal shiftwidth=4 softtabstop=4
autocmd FileType text,markdown,tex setlocal spell spelllang=en_gb
autocmd FileType text,markdown,tex set textwidth=80

set tabstop=4
set shiftwidth=4
set number
set relativenumber 
set cursorline
set ignorecase
set smartcase
set nocompatible
set laststatus=2
set complete+=kspell
set showcmd

" Enbales recursive file finding (fuzzy finder)
set path=**
set wildmenu

" Auto reload a file when it is changed outside of vim
set autoread

runtime! ftplugin/man.vim

" Key Mappings
cabbrev h vert bo h
cabbrev tn tabnew

noremap <leader><space> :nohlsearch<CR>
nnoremap <leader>jd :YcmCompleter GoTo<CR>

" make <a-E> execute a script
nnoremap <Esc>E :!chmod +x % && ./%

" make <a-P> call mdtopdf on the current file
nnoremap <Esc>P :!mdtopdf -d %


map <leader>* :grep <cword> * --exclude-dir={.git,tmp,log}<CR><CR>
let g:ycm_global_ycm_extra_conf = '$HOME/.vim/ycm/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0

" nnoremap <leader>cd vi)y:! cdoc "<c-r>0"<CR>
command Dgt execute "vert bo help digraph-table"

set splitright
set splitbelow

let g:ft_man_open_mode = 'vert'
